{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","handleKeyPress","this","onSearch","event","setState","target","value","key","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","currentlyPlaying","addTrack","removeTrack","togglePlayPreview","renderPreviewIcon","onAdd","track","onRemove","isRemoval","audio","refs","pause","play","preview","aria-hidden","ref","src","onEnded","cover","alt","name","artist","album","renderAction","id","TrackList","tracks","map","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","items","artists","uri","images","url","preview_url","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cadf3bfa.chunk.js","sourcesContent":["const clientId = 'f47451de3cf042f1afad68fe81a8561d';\nconst redirectUri = 'http://localhost:3000/';\n\nlet accessToken;\n\nconst Spotify = {\n\n    // Gets access token from Spotify\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        if (hasAccessToken && hasExpiresIn) {\n            accessToken = hasAccessToken[1];\n            const expiresIn = Number(hasExpiresIn[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => { \n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                cover: track.album.images[2].url,\n                preview: track.preview_url\n            }));\n        });\n    },\n\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        let userId;\n\n        // Return user's ID from Spotify API\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(\n            response => {\n                if(response.ok) {\n                    return response.json();\n                } \n        }).then(\n            jsonResponse => {\n                userId = jsonResponse.id;\n\n                // Adds playlist to user's account\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({name: playlistName})\n                }).then(\n                    response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        console.log('API request failed');\n                    }\n                }).then(\n                    jsonResponse => {\n                        const playlistId = jsonResponse.id;\n\n                        // Adds tracks to new playlist \n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                            headers: headers,\n                            method: 'POST',\n                            body: JSON.stringify({ uris: trackURIs})\n                        });\n                    });\n            });\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      term: ''\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  \n  // Sets the argument for the seearch method in App.js to the state of term\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n  \n  // Sets the state of term to the value the user enters in input\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  handleKeyPress(event) {\n    if(event.key === 'Enter') {\n      this.search();\n    }\n  }\n  \n  render() {\n    return(\n      <div className=\"SearchBar\">\n        <input  placeholder=\"Enter A Song, Album, or Artist\"\n                onChange={this.handleTermChange}\n                onKeyPress={this.handleKeyPress} />\n        <a  onClick={this.search}>SEARCH</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            currentlyPlaying: false,\n        };\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.togglePlayPreview = this.togglePlayPreview.bind(this);\n        // this.audioEnded = this.audioEnded.bind(this);\n        this.renderPreviewIcon = this.renderPreviewIcon.bind(this);\n    }\n    // Adds this.props.track as an argument to the addTrack method in App.js\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    // Adds this.props.track as an argument to the removeTrack method in App.js\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    \n    // Renders either a + or a - link to add or remove tracks from playlist.\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <i   className=\"Track-action fa fa-minus-circle\" \n                        onClick={this.removeTrack}></i>\n        }\n        return <i   className=\"Track-action fa fa-plus-circle\" \n                    onClick={this.addTrack}></i>\n    }\n\n    togglePlayPreview() {\n        const audio = this.refs.audio;\n        if (!this.state.currentlyPlaying) {\n            audio.play();\n            this.setState({ \n                currentlyPlaying: true, \n            });\n        } else {\n            audio.pause();\n            this.setState({ \n                currentlyPlaying: false,\n            });\n        }\n    }\n\n    // audioEnded() {\n    //     this.setState({\n    //         currentlyPlaying: false\n    //     });\n    // }\n\n    renderPreviewIcon() {\n        if(this.props.track.preview) {\n            if (!this.state.currentlyPlaying) {\n                return (\n                    <i  className=\"fa fa-play Track-preview-icon\" \n                        aria-hidden=\"true\" \n                        onClick={this.togglePlayPreview}></i>\n                );\n            } else {\n                return (\n                        <i  className=\"fa fa-pause Track-preview-icon\" \n                            aria-hidden=\"true\" \n                            onClick={this.togglePlayPreview}></i>\n                );\n            }\n        } else {\n            return <p className=\"Track-preview-unavailable\">No <br/> Preview <br />Available</p>\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"Track\" key={this.props.track.id}>\n                <div className=\"Track-cover-preview\">\n                    <audio ref=\"audio\" src={this.props.track.preview} onEnded={() => this.setState({ currentlyPlaying: false })}></audio>\n                    <div className=\"Track-preview-container\">\n                        {this.renderPreviewIcon()}\n                    </div>\n                    <img className=\"Track-album-cover\" src={this.props.track.cover} alt=\"album cover\"/>\n                </div>\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    \n    render() {\n        return(\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track   key={track.id}\n                                        track={track}\n                                        onAdd={this.props.onAdd}\n                                        onRemove={this.props.onRemove}\n                                        isRemoval={this.props.isRemoval}\n                                        tracks={this.props.tracks}/>\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList  tracks={this.props.searchResults}\n                            onAdd={this.props.onAdd}/>\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList'\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    \n    // Updates Playlist name to value user inputs\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    \n    render() {\n        return(\n            <div className=\"Playlist\">\n                <input  defaultValue={this.props.playlistName}\n                        onChange={this.handleNameChange}/>\n                    <TrackList  tracks={this.props.playlistTracks}\n                                isRemoval={true}\n                                onRemove={this.props.onRemove}/>\n                <a  className=\"Playlist-save\" \n                    onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n  \n  // Adds track from Search Results to Playlist\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Removes track from Playlist by filtering out track id from playlistTracks\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(current => current.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Sends search term request to spotify and returns results of search in the search results panel\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  // Updates the name of the Playlist\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  // Saves playlist name and tracks to user's account\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}